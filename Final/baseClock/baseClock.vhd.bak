library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity baseClock is
	port(CLOCK_50 : in std_logic;
		  
		  --KEYs and SWs to control
		  KEY : in std_logic_vector(3 downto 0);
		  
		  SW : in std_logic_vector(3 downto 0);
		  
		  --Audio
		  i2c_sclk : inout std_logic;
		  i2c_sdat : inout std_logic;
		  aud_xck     : out std_logic;
		  aud_bclk    : in  std_logic;
		  aud_adclrck : in  std_logic;
		  aud_adcdat  : in  std_logic;
		  aud_dacdat  : out std_logic);
end baseClock;

architecture RTL of baseClock is

	signal clock, alarm, chrono, chronoDown, db_KEY3 : std_logic;
	
begin
	
	--Clock entity
	clock: entity work.Clock(Behavioral)
				port map(CLOCK_50 => CLOCK_50,
							enable => clock and (not alarm) and (not chrono) and (not chronoDown),
							SW => SW,
							KEY => KEY);
							
	--Alarm entity
	alarm: entity work.Alarm(Behavioral)
				port map(CLOCK_50 => CLOCK_50,
							enable => (not clock) and alarm and (not chrono) and (not chronoDown),
							KEY => KEY,
							SW => SW,
							i2c_sclk => i2c_sclk,
							i2c_sdat => i2c_sdat,
							aud_xck    => aud_xck,
							aud_bclk    => aud_bclk,
							aud_adclrck => aud_adclrck,
							aud_adcdat  => aud_adcdat,
							aud_dacdat  => aud_dacdat);
							
	--Chronometer entity
	chronometer: entity work.Chronometer(Behavioral)
							port map(CLOCK_50 => CLOCK_50,
										enable => (not clock) and (not alarm) and chrono and (not chronoDown),
										KEY => KEY);
										
	--Chronometer Down entity
	chronometerDown: entity work.ChronometerDown(Behavioral)
								port map(CLOCK_50 => CLOCK_50,
											enable => (not clock) and (not alarm) and (not chrono) and chronoDown,
											KEY => KEY,
											SW => SW,
											i2c_sclk => i2c_sclk,
											i2c_sdat => i2c_sdat,
											aud_xck    => aud_xck,
											aud_bclk    => aud_bclk,
											aud_adclrck => aud_adclrck,
											aud_adcdat  => aud_adcdat,
											aud_dacdat  => aud_dacdat);
											
	--Debounce for KEY(3)	
	db3: entity work.debouncer(v1) 						
					generic map(clock_frequency => 50.0E6,
									window_duration => 0.0)
					port map(clock => CLOCK_50,
								dirty => not KEY(3),
								clean => db_KEY3);
								
	--Process to choose Clock Function
	process(db_KEY3)
	begin
		if(db_KEY3 = '1') then
			if(clock = '1') then
				alarm <= '0';
				chrono <= '0';
				chronoDown <= '0';
			
			elsif(chrono = '1') then
				alarm <= '0';
				clock <= '0';
				chronoDown <= '0';
			
			elsif(chronoDown = '1') then
				alarm <= '0';
				clock <= '0';
				chrono <= '0';
				
			else
				chronoDown <= '0';
				clock <= '0';
				chrono <= '0';
			end if;
		end if;
	end process;