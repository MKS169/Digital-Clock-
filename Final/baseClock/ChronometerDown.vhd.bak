library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity ChronometerDown is
	port(CLOCK_50 : in std_logic;
	
		  --KEYS to control functions
		  
		  KEY : in std_logic_vector(1 downto 0);
		  
		  -- KEY(0) to stop chronometer
        -- KEY(1) to save lap/reset chronometer
        -- Keys are all active low
		  
		  --Time Displays
        HEX0 : out std_logic_vector(6 downto 0); -- CS
        HEX1 : out std_logic_vector(6 downto 0); -- CS
        HEX2 : out std_logic_vector(6 downto 0); -- S
        HEX3 : out std_logic_vector(6 downto 0); -- S
        HEX4 : out std_logic_vector(6 downto 0); -- M
        HEX5 : out std_logic_vector(6 downto 0); -- M
		  HEX6 : out std_logic_vector(6 downto 0); -- Lap
        HEX7 : out std_logic_vector(6 downto 0); -- Lap
		  
		  --LEDs to test if keys are pressed
		  LEDG : out std_logic_vector(6 downto 0));
end ChronometerDown;

architecture Behavioral of ChronometerDown is
	
	signal press : integer range 0 to 3 := 0;
	signal sec, min : integer range 0 to 60 := 60;
	signal hour : integer range 0 to 99 := 99;
	signal set : integer;
	signal clk, clk5, stop : std_logic := '0';
	signal h2BCD1, h2BCD, m2BCD1, m2BCD, s2BCD1, s2BCD, h2Dis1, h2Dis, m2Dis1, m2Dis, s2Dis1, s2Dis : std_logic_vector(7 downto 0);
	signal db_KEY0, db_KEY1 : std_logic;
	
begin
		
		--Begin Convert minutes, seconds and centiseconds to 7Segments
		bin2BCD: entity work.Bin2BCD(Behavioral)
						port map(binIn  => std_logic_vector(to_unsigned(sec,8)),
									binIn1 => std_logic_vector(to_unsigned(min,8)),
									binIn2 => std_logic_vector(to_unsigned(cs,8)),
									bcdMS  => s2BCD1,	--Most Significant Second Digit
									bcdLS  => s2BCD,	--Least Significant Second Digit
									bcdMS1 => m2BCD1,	--Most Significant Minute Digit
									bcdLS1 => m2BCD,	--Least Significant Minute Digit
									bcdMS2 => h2BCD1,	--Most Significant CentiSecond Digit
									bcdLS2 => h2BCD);	--Least Significant CentiSecond Digit
									
		b7segH2 : entity work.Bin7SegDecoder(Behavioral) --Most Significant CentiSecond Digit
						port map(binInput => h2BCD1(3 downto 0),
									decOut_n => h2Dis1(6 downto 0));
						
		b7segL2 : entity work.Bin7SegDecoder(Behavioral) --Least Significant CentiSecond Digit
						port map(binInput => h2BCD(3 downto 0),
									decOut_n => h2Dis(6 downto 0));
		
		b7segH1 : entity work.Bin7SegDecoder(Behavioral) --Most Significant Second Digit
						port map(binInput => s2BCD1(3 downto 0),
									decOut_n =>	s2Dis1(6 downto 0));
				
		b7segL1 : entity work.Bin7SegDecoder(Behavioral) --Least Significant Second Digit
						port map(binInput => s2BCD(3 downto 0),
									decOut_n => s2Dis(6 downto 0));
						
		b7segH : entity work.Bin7SegDecoder(Behavioral) --Most Significant Minute Digit
						port map(binInput => m2BCD1(3 downto 0),
									decOut_n => m2Dis1(6 downto 0));
						
		b7segL : entity work.Bin7SegDecoder(Behavioral) --Least Significant Minute Digit
						port map(binInput => m2BCD(3 downto 0),
									decOut_n => m2Dis(6 downto 0));
		--End Convert minutes, seconds and centiseconds to 7Segments
		
		--Frequency Dividers
		freqDiv: entity work.freqDivider(Behavioral) 	--Generate Clock with 1Hz frequency
						generic map(DIV_FACTOR => 50E6)
						port map(clkIn => CLOCK_50,
									clkOut => clk);
		
		freqDiv2: entity work.freqDivider(Behavioral) 	--Generate Clock with 5Hz frequency
						generic map(DIV_FACTOR => 10E6)
						port map(clkIn => CLOCK_50,
									clkOut => clk5);
		
		--Debounce Units
		db0: entity work.debouncer(v1) 						--Debounce for KEY(0)
					generic map(clock_frequency => 50.0E6,
									window_duration => 0.0)
					port map(clock => CLOCK_50,
								dirty => not KEY(0),
								clean => db_KEY0);
								
		db1: entity work.debouncer(v1) 						--Debounce for KEY(1)
					generic map(clock_frequency => 50.0E6,
									window_duration => 0.0)
					port map(clock => CLOCK_50,
								dirty => not KEY(1),
								clean => db_KEY1);
		
	
	--Seconds
	setSec: entity work.Set(Behavioral)
						generic map(max => 59)
						port map(clk => clk5,
									sin => db_KEY1 and setMin,
									sout => db_KEY0 and setMin,
									count => sec);
	
	--Minutes
	setMin: entity work.Set(Behavioral)
						generic map(max => 59)
						port map(clk => clk5,
									sin => db_KEY1 and setMin,
									sout => db_KEY0 and setMin,
									count => min);
									
	--Hours
	setHour: entity work.Set(Behavioral)
						generic map(max => 23)
						port map(clk => clk5,
									sin => db_KEY1 and setHour,
									sout => db_KEY0 and setHour,
									count => hour);
	--Process to set seconds, minutes or hours
	--Begin
	process(clk3)
	begin
		--Set Hours(setHour = '1') or Minutes(setMin = '1') or Seconds(setSec = '1')
		if(rising_edge(clk3)) then
			if(db_KEY3 = '1' and SW(0) = '1') then
				
				if(setHour = '1') then
					setMin <= '1';
					setHour <= '0';
					setSec <= '0';
				elsif(setMin = '1') then0
					setSec <= '1';
					setMin <= '0';
					setHour <= '0';
				else
					setHour <= '1';
					setMin <= '0';
					setSec <= '0';
				end if;
					
			elsif(SW(0) = '0') then
				setHour <= '0';
				setMin <= '0';
				setSec <= '0';
			end if;
		end if;
	end process;	
	--End	
	
	--Process to check if is a long or short press
	--Begin
	process(db_KEY1, db_KEY0)
	begin
		--Press time check
		--Begin
		if(db_KEY0 = '1') then
			press <= press + 1;
			
			if(press >= 3) then
				press <= 3;
			end if;
		else
			press <= 0;
		end if;	
		
		if(db_KEY1 = '1') then
			press1 <= press1 + 1;
			
			if(press1 >= 3) then
				press1 <= 3;
			end if;
		else
			press1 <= 0;
		end if;
		--End
	end process;
	--End
	
	--Start HH:MM:SS counter	
	process(clk)
	begin	
		
		--Set once every centisecond
		
		if(rising_edge(clk)) then	
			
			if(SW(1) = '0') then		--Chronometer counting
				cs <= cs + 1;
				
			elsif(Sw(1) = '1') then	--Chronometer stopped
				
				if(SW(0) = '1') then	
					cs <= 0;
					sec <= 0;
					min <= 0;
				
				else
					cs <= cs;
				
				end if;
			end if;
			
			if(cs = 99) then
				cs <= 0;
				sec <= sec + 1;
				
				if(sec = 59) then
					sec <= 0;
					min <= min + 1;
					
					if(min = 59) then
						min <= 0;
					end if;
				end if;
			end if;
		end if;
		--End MM:SS:CS counter
		
		--When KEY(1) is short pressed a "lap" is saved
		--They blink with frequency = 1Hz
	
		--Minutes, Seconds, Centiseconds	
		if(set > 0 and press < 3) then
			if(clk = '1') then
				HEX5 <= "1111111";
				HEX4 <= "1111111";
				HEX3 <= "1111111";
				HEX2 <= "1111111";
				HEX1 <= "1111111";
				HEX0 <= "1111111";
			else
				HEX5 <= svm2Dis1(6 downto 0); --Most Significant Saved Minute Digit
				HEX4 <= svm2Dis(6 downto 0); --Least Significant Saved Minute Digit
				HEX3 <= svs2Dis1(6 downto 0); --Most Significant Saved Second Digit
				HEX2 <= svs2Dis(6 downto 0); --Least Significant Saved Second Digit
				HEX1 <= svcs2Dis1(6 downto 0); --Most Significant Saved CentiSecond Digit
				HEX0 <= svcs2Dis(6 downto 0); --Least Significant Saved CentiSecond Digit
			end if;
			
		else
			HEX5 <= m2Dis1(6 downto 0); --Most Significant Minute Digit
			HEX4 <= m2Dis(6 downto 0); --Least Significant Minute Digit
			HEX3 <= s2Dis1(6 downto 0); --Most Significant Second Digit
			HEX2 <= s2Dis(6 downto 0); --Least Significant Second Digit
			HEX1 <= cs2Dis1(6 downto 0); --Most Significant CentiSecond Digit
			HEX0 <= cs2Dis(6 downto 0); --Least Significant CentiSecond Digit
		
		
		
		HEX7 <= msLap2Dis(6 downto 0);  --Most Significant Lap Digit
		HEX6 <= lsLap2Dis(6 downto 0);  --Least Significant Lap Digit
		end if;
	end process;
	
	LEDG(0) <= db_KEY0; --On if key(0) is pressed after debounce
	LEDG(2) <= db_KEY1; --On if key(1) is pressed after debounce	

end Behavioral;